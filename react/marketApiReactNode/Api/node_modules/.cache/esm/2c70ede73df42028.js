let express,colors,helmet,bodyParser,cors,routes;_3df‍.w("express",[["default",["express"],function(v){express=v}]]);_3df‍.w("colors",[["default",["colors"],function(v){colors=v}]]);_3df‍.w("helmet",[["default",["helmet"],function(v){helmet=v}]]);_3df‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_3df‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_3df‍.w("./routes.js",[["default",["routes"],function(v){routes=v}]]);






const app = express();

app.use( helmet() );
app.use (cors() );
app.use( bodyParser.json() );
app.use ( routes );
app.use ( (err, req, res, next) => {
    if(!err) {
        return next();
    }
    res.statusCode = err.status;
    res.json({ status: err.status, message: err.message});
});
app.use( (req, res) =>{
    res.statusCode = 404;
    res.json({status: 404, message: 'Not Found'});
});

const port = process.env.PORT || 3200;
app.listen(port, 'localhost', () => {
    _3df‍.g.console.log(`Personal Node Server is Listening on ${colors.magenta(`http://localhost:${port}`)}`.gray);
    _3df‍.g.console.log(`Shutdown Node Server with CTRL + C`.gray);
});